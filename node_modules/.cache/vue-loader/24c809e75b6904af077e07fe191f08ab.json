{"remainingRequest":"D:\\hzgs-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\hzgs-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\hzgs-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\hzgs-admin\\src\\views\\dashboard\\index.vue?vue&type=template&id=106c86ed&scoped=true&","dependencies":[{"path":"D:\\hzgs-admin\\src\\views\\dashboard\\index.vue","mtime":1623680203916},{"path":"D:\\hzgs-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\hzgs-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\hzgs-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\hzgs-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIHJlZjogImRvYyIsCiAgICAgIHN0YXRpY0NsYXNzOiAiZ3MtaG9tZS13cmFwcGVyIiwKICAgICAgb246IHsKICAgICAgICAiIWNsaWNrIjogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICBfdm0uc2hvd1dpbmRvdyA9IGZhbHNlCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiYmctaW1nIiwKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvYmFja2dyb3VuZC5wbmciKSwgYWx0OiAiIiB9CiAgICAgIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRvcC10aXRsZSIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInRvcC1sZWZ0LXdyYXBwZXIiLAogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3RvcGxlZnQucG5nIiksIGFsdDogIiIgfQogICAgICAgIH0pLAogICAgICAgIF92bS5fbSgwKSwKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0b3AtcmlnaHQtaW1nIGFicyIsCiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvdG9wcmlnaHQucG5nIikgfQogICAgICAgIH0pLAogICAgICAgIF9jKAogICAgICAgICAgInNwYW4iLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICJ6LWluZGV4IjogIjkiLAogICAgICAgICAgICAgIGNvbG9yOiAiIzIzY2VmZCIsCiAgICAgICAgICAgICAgcmlnaHQ6ICIzJSIsCiAgICAgICAgICAgICAgdG9wOiAiMTAlIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLnRpbWUpKV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygic3ZnLWljb24iLCB7CiAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgcmlnaHQ6ICIydnciLAogICAgICAgICAgdG9wOiAiNXZoIiwKICAgICAgICAgIGNvbG9yOiAiIzIzY2VmZCIsCiAgICAgICAgICAiei1pbmRlIjogIjk5OSIsCiAgICAgICAgICBjdXJzb3I6ICJwb2ludGVyIiwKICAgICAgICAgIHdpZHRoOiAiMjBweCIsCiAgICAgICAgICBoZWlnaHQ6ICIyMHB4IgogICAgICAgIH0sCiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICJpY29uLWNsYXNzIjogX3ZtLmZ1bGxzY3JlZW4gPyAiZXhpdC1mdWxsc2NyZWVuIiA6ICJmdWxsc2NyZWVuIgogICAgICAgIH0sCiAgICAgICAgb246IHsgY2xpY2s6IF92bS5oYW5kbGVGdWxsU2NyZWVuIH0KICAgICAgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYm90dG9tLWNvbnRlbnQgZi13aWR0aCBhYnMiIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRlbnQtbWlkIGYtaGVpZ2h0IGFicyIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNzYuNSUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZi13aWR0aCByZWwiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiOTcuNSUiLCAibWFyZ2luLWJvdHRvbSI6ICIxLjV2aCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnNob3dXaW5kb3csCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJzaG93V2luZG93IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgcmVmOiAiaW5mb1dpbmRvdyIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICLigJxncy1pbmZvLXdpbmRvdy1saW5l4oCdIiwKICAgICAgICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICJhYnNvbHV0ZSIsCiAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjI1MHB4IiwKICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjE0NXB4IiwKICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICJyZ2JhKDgsIDMyLCA1MSwgMC44NSkiLAogICAgICAgICAgICAgICAgICAgICAgInotaW5kZXgiOiAiMTIiLAogICAgICAgICAgICAgICAgICAgICAgImJvcmRlci1yYWRpdXMiOiAiNnB4IiwKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAicmdiKDM1IDIwNiAyNTMpIiwKICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICIxMHB4IiwKICAgICAgICAgICAgICAgICAgICAgIHRvcDogIjEwcHgiLAogICAgICAgICAgICAgICAgICAgICAgImZvbnQtc2l6ZSI6ICIxNHB4IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGluZS1pbmZvLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZS1kZXRhaWwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmluZm9UeXBlID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIue6v+i3r+WQjeensO+8miIgKyBfdm0uX3MoX3ZtLmN1cnJlbnRab25lLm5hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmluZm9UeXBlID09IDEKICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuiuvuWkh+WQjeensO+8miIgKyBfdm0uX3MoX3ZtLmN1cnJlbnREZXYubmFtZSkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLmluZm9UeXBlID09IDAKICAgICAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaW5lLWluZm8tY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudC1kZXRhaWwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi6Ziy5Yy65pWw77yaIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmN1cnJlbnRab25lLmZpZWxkc19udW0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQtZGV0YWlsIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIuWRiuitpuS6i+S7tuaVsO+8miIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jdXJyZW50Wm9uZS5hbGFybV9udW0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQtZGV0YWlsIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIui0n+i0o+S6uuS4gO+8miIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jdXJyZW50Wm9uZS5wZXJzb24xKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50LWRldGFpbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLotJ/otKPkurrkuozvvJoiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uY3VycmVudFpvbmUucGVyc29uMikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgIF92bS5pbmZvVHlwZSA9PSAxCiAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGluZS1pbmZvLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQtZGV0YWlsIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoIuiuvuWkh+WPt++8miIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jdXJyZW50RGV2LmRldmljZV9pZCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudC1kZXRhaWwiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigi5ZGK6K2m5LqL5Lu25pWw77yaIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmN1cnJlbnREZXYuYWxhcm1fbnVtKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZi13aWR0aCBmLWhlaWdodCBhYnMiLAogICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyBsZWZ0OiAiMCIsIHRvcDogIjAiLCAiei1pbmRleCI6ICIyIiB9LAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvbWFwLnBuZyIpLCBhbHQ6ICIiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJiYWlkdS1tYXAiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJibS12aWV3IiwKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgbWFwU3R5bGU6IF92bS5tYXBTdHlsZSwKICAgICAgICAgICAgICAgICAgICAgIG1hcENsaWNrOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICJzY3JvbGwtd2hlZWwtem9vbSI6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IF92bS5jZW50ZXIsCiAgICAgICAgICAgICAgICAgICAgICB6b29tOiBfdm0uem9vbQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsgcmVhZHk6IF92bS5oYW5kbGVyIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0ucG9seWxpbmVQYXRoLCBmdW5jdGlvbihpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJibS1tYXJrZXIiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGl0ZW0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggJSAyID09PSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAiaHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA4LzAzL2FVaVR0ZS5naWYiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAiaHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA4LzAzL2FVQXVsOS5naWYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogeyB3aWR0aDogMzUsIGhlaWdodDogMzUgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmhhbmRsZVNob3dEZWNJbmZvKGl0ZW0uaWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0ubGluZXMsIGZ1bmN0aW9uKGxpbmUsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7IGtleTogImxpbmUiICsgIi0iICsgbGluZS56b25lX2lkICsgIi0iICsgaW5kZXggfSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKGxpbmUuZmllbGRzLCBmdW5jdGlvbihpdGVtLCBpbmRleDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoImJtLXBvbHlsaW5lIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBsaW5lLnpvbmVfaWQgKyAiLS0iICsgaW5kZXgyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogaXRlbS5wb2ludHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtY29sb3IiOiBpdGVtLmxpbmVDb2xvciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1vcGFjaXR5IjogMC43NSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS13ZWlnaHQiOiA0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0aW5nOiBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlb3ZlcjogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5saW5lSW4oaW5kZXggKyAiLS0iICsgaW5kZXgyKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZW91dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5saW5lT3V0KGluZGV4ICsgIi0tIiArIGluZGV4MikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGVzdChsaW5lLnpvbmVfaWQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0uYWxhcm1saW5lcywgZnVuY3Rpb24oZmllbGQsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoImJtLXBvbHlsaW5lIiwgewogICAgICAgICAgICAgICAgICAgICAgICBrZXk6ICJhbGFybSIgKyBpbmRleCwKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgInotaW5kZXgiOiAiMTAwIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGZpZWxkLm5vZGVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2UtY29sb3IiOiAiI2VjMmQyZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInN0cm9rZS1vcGFjaXR5IjogMC45LAogICAgICAgICAgICAgICAgICAgICAgICAgICJzdHJva2Utd2VpZ2h0IjogNCwKICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0aW5nOiBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0udGVzdChmaWVsZC56b25lKQogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29udGVudC1yaWdodCBmLWhlaWdodCBhYnMiLAogICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjI1JSIsIHJpZ2h0OiAiMCIsIHBhZGRpbmc6ICIwIDIwcHgiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZi13aWR0aCByZWwiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMTclIiwKICAgICAgICAgICAgICAgICAgIm1hcmdpbi1ib3R0b20iOiAiMS41dmgiLAogICAgICAgICAgICAgICAgICBwb3NpdGlvbjogInJlbGF0aXZlIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmLXdpZHRoIGYtaGVpZ2h0IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvY29uZGl0aW9uLnBuZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInN3aXRjaC1hbGwiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICIjZmZmIiwgImZvbnQtc2l6ZSI6ICI1cHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLmn6XnnIvlrp7ml7bmlbDmja7vvJoiKV0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAic3dpdGNoIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzd2l0Y2gtYmciLAogICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBvbjogdGhpcy5yZWFsVGltZSA9PSAxIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzd2l0Y2gtYnRuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBvbjogdGhpcy5yZWFsVGltZSA9PSAxIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5vcGVuU3dpdGNoIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZi13aWR0aCBmLWhlaWdodCBhYnMiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHRvcDogIjM1JSIsIGxlZnQ6ICIzLjUlIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJlbC1zZWxlY3QiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hcC1zZWxlY3QiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzaXplOiAibWluaSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1hcEZvcm0ubGluZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ubWFwRm9ybSwgImxpbmUiLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibWFwRm9ybS5saW5lIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5saW5lTGlzdCwgZnVuY3Rpb24oaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImVsLW9wdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBpdGVtLmZpZWxkX2lkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uZmllbGRfaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBpdGVtLmZpZWxkX2lkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgIiArIF92bS5fcyhpdGVtLmZpZWxkX2lkKSArICIgIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZi13aWR0aCBmLWhlaWdodCBhYnMiLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHRvcDogIjY1JSIsIGxlZnQ6ICIzLjUlIiB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJlbC1zZWxlY3QiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1hcC1zZWxlY3QiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzaXplOiAibWluaSIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm1hcEZvcm0udGltZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHNldChfdm0ubWFwRm9ybSwgInRpbWUiLCAkJHYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibWFwRm9ybS50aW1lIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAiZWwtb3B0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHZhbHVlOiAiMSIsIGxhYmVsOiAi5LiA5ZGo5YaFIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIOS4gOWRqOWGhSAiKV0KICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImVsLW9wdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyB2YWx1ZTogIjIiLCBsYWJlbDogIuS4pOWRqOWGhSIgfSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiDkuKTlkajlhoUgIildCiAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICJlbC1vcHRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgdmFsdWU6ICIzIiwgbGFiZWw6ICLkuIDmnIjlhoUiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIg5LiA5pyI5YaFICIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImYtd2lkdGggcmVsIiwgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiODAuNSUiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImYtd2lkdGggZi1oZWlnaHQiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uLy4uL2Fzc2V0cy9pbWcvZXZlbnQucG5nIiksIGFsdDogIiIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfdm0uX20oMiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFicyBmLXdpZHRoIHVzZXJfc2tpbGxzIiwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyB0b3A6ICI4JSIsIGhlaWdodDogIjEwMCUiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImVsLXRhYmxlIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICI5NCUiLCBoZWlnaHQ6ICI4NCUiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGRhdGE6IF92bS50YWJsZURhdGEgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImVsLXRhYmxlLWNvbHVtbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImluZGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAi5bqP5Y+3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduOiAiY2VudGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNTAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImVsLXRhYmxlLWNvbHVtbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogImJlZ2luX3RpbWUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpZ246ICJjZW50ZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1pbi13aWR0aCI6ICIxMDAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICLlj5HnlJ/ml7bpl7QiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImVsLXRhYmxlLWNvbHVtbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDogInBvc2l0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAi5Y+R55Sf5L2N572uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduOiAibGVmdCIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljU3R5bGU6IHsgZGlzcGxheTogIm5vbmUiIH0sIGF0dHJzOiB7IGRyYWdnYWJsZTogInRydWUiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImdzLWluZm8td2luZG93LWFyZWEiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhcmVhLXdyYXBwZXIiLAogICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5oYW5kbGVTaG93QXJlYUluZm8gfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCLlnLDlm77nu5/orqHkv6Hmga8iKV0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgICAgICAgcmlnaHQ6ICIxNXB4IiwKICAgICAgICAgICAgICAgICAgICAgIHRvcDogIjBweCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd0FyZWEgPT0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgPyBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJlbC1pY29uLWFycm93LXVwIiB9KQogICAgICAgICAgICAgICAgICAgICAgOiBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJlbC1pY29uLWFycm93LWRvd24iIH0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0b3AtbWlkLXdyYXBwZXIiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImYtd2lkdGggZi13aWR0aCIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3RvcG1pZC5wbmciKSB9CiAgICAgIH0pLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZS1jb250ZW50IGYtd2lkdGggYWJzIiB9LCBbCiAgICAgICAgX3ZtLl92KCLmjK/liqjpooTorabpmLLmiqTlhajopobnm5blubPlj7AiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb20tdGl0bGUtd3JhcHBlciBhYnMiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImYtd2lkdGggZi1oZWlnaHQiLAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vLi4vYXNzZXRzL2ltZy90aXRsZS5wbmciKSwgYWx0OiAiIiB9CiAgICAgIH0pLAogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJjb20tdGl0bGUtY29udGVudCBhYnMiIH0sIFsKICAgICAgICBfdm0uX3YoIue6v+i3r+aXtumXtOmAieaLqSIpCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbS10aXRsZS13cmFwcGVyIGFicyIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZi13aWR0aCBmLWhlaWdodCIsCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi8uLi9hc3NldHMvaW1nL3RpdGxlLnBuZyIpLCBhbHQ6ICIiIH0KICAgICAgfSksCiAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImNvbS10aXRsZS1jb250ZW50IGFicyIgfSwgWwogICAgICAgIF92bS5fdigi6L+R5pyf5LqL5Lu25YiX6KGoIikKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}