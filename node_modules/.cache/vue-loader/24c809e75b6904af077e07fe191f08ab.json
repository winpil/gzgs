{"remainingRequest":"D:\\hzgs-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\hzgs-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\hzgs-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\hzgs-admin\\src\\views\\dashboard\\index.vue?vue&type=template&id=106c86ed&scoped=true&","dependencies":[{"path":"D:\\hzgs-admin\\src\\views\\dashboard\\index.vue","mtime":1624279750758},{"path":"D:\\hzgs-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\hzgs-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\hzgs-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\hzgs-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}